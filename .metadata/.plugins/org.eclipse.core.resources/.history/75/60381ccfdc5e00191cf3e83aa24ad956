package bkg16_Music;

import java.util.List;
import java.util.Set;
import java.util.UUID;
import javax.persistence.*;

import org.json.JSONArray;

/**
 * Class AlbumManager is responsible for creating, updating, retrieving and deleting Album records. 
 * @author bengundy
 *
 */
public class AlbumManager {

	/**
	 * Method createAlbum generates a new Album record in the ORM object grid.
	 * @param title is the title of the album.
	 * @param releaseDate is the date on which the album was released.
	 * @param coverImagePath is the location of the cover image for the album.
 	 * @param recordingCompany is the company that recorded and released the album.
	 * @param numberOfTracks is the number of tracks on the album.
	 * @param pmrcRating is the PMRC's rating for the album.
	 * @param length is the length of the album in minutes.
	 */
	public void createAlbum(String title, String releaseDate, String coverImagePath, String recordingCompany, int numberOfTracks, String pmrcRating, int length) {
		// Create and activate persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Album a = new Album();
		
		a.setAlbumID(UUID.randomUUID().toString());
		a.setTitle(title);
		a.setReleaseDate(releaseDate);
		a.setCoverImagePath(coverImagePath);
		a.setRecordingCompany(recordingCompany);
		a.setNumberOfTracks(numberOfTracks);
		a.setPmrcRating(pmrcRating);
		a.setLength(length);

		// Add Album object to ORM object grid.
		em.persist(a);
		
		// Commit transaction.
		em.getTransaction().commit();
		
		// Close connection to persistence manager.
		em.close();
		emFactory.close();
		
	}
	
	/**
	 * Method updateAlbum updates an Album record in the ORM object grid.
	 * @param albumID is the identifying UUID of the target Album.
	 * @param title is the title of the album.
	 * @param releaseDate is the date on which the album was released.
	 * @param coverImagePath is the location of the cover image for the album.
 	 * @param recordingCompany is the company that recorded and released the album.
	 * @param numberOfTracks is the number of tracks on the album.
	 * @param pmrcRating is the PMRC's rating for the album.
	 * @param length is the length of the album in minutes.
	 */
	public void updateAlbum(String albumID, String title, String releaseDate, String coverImagePath, String recordingCompany, int numberOfTracks, String pmrcRating, int length) {
		//Create and activate persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Album a = em.find(Album.class, albumID);
		
		// Check whether all fields are empty (or greater than 0 for ints) before updating them.
		if(!title.equals("")) {
			a.setTitle(title);
		}
		
		if(!releaseDate.equals("")) {
			a.setReleaseDate(releaseDate);
		}
		
		if(!coverImagePath.equals("")) {
			a.setCoverImagePath(coverImagePath);
		}
		
		if(!recordingCompany.equals("")) {
			a.setRecordingCompany(recordingCompany);
		}
		
		if(numberOfTracks > 0) {
			a.setNumberOfTracks(numberOfTracks);
		}
		
		if(!pmrcRating.equals("")) {
			a.setPmrcRating(pmrcRating);
		}
		
		if(length > 0) {
			a.setLength(length);
		}

		// Add Album object to ORM object grid.
		em.persist(a);
		
		// Commit transaction.
		em.getTransaction().commit();
		
		// Close connection to persistence manager.
		em.close();
		emFactory.close();
	}
	
	/**
	 * Method deleteAlbum removes an Album record from the ORM object grid.
	 * @param albumID is the identifying UUID of the target Album.
	 */
	public void deleteAlbum(String albumID) {
		//Create and activate persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Album a = em.find(Album.class, albumID);
		
		// Remove Album object from ORM object grid.
		em.remove(a);
		
		// Commit transaction.
		em.getTransaction().commit();
		
		// Close connection to persistence manager.
		em.close();
		emFactory.close();
	}
	
	/**
	 * Method getAlbum locates an Album record in the ORM object grid using its albumID.
	 * @param albumID is the identifying UUID of the target Album.
	 * @return is the Album object.
	 */
	public Album getAlbum(String albumID) {
		// Create and activate persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Album a = em.find(Album.class, albumID);

		// Close connection to persistence manager.
		em.close();
		emFactory.close();
		
		return a;
	}
	
	/**
	 * Method getAlbumList returns a set of albums that fit the incoming search criteria.
	 * @param searchTerm is the string target of the search.
	 * @param searchType is the portion of the album title that must match the searchTerm.
	 * @return is a JSON array containing a list of albums that fit the incoming search criteria. 
	 */
	public JSONArray getAlbumList(String searchTerm, String searchType){
		// Create persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		
		// Using prepared statement to prevent SQL injections.
		// Using "LIKE" instead of "=" in the query reduces the number of characters needed in the set parameters for each search type.
		Query q = em.createQuery("SELECT a.albumID FROM Album a WHERE a.title LIKE ?1");
		if(!searchTerm.equals("")) {
			if(searchType.equalsIgnoreCase("equals")) {
				q.setParameter(1, searchTerm);
			} else if(searchType.equalsIgnoreCase("begins")) {
				q.setParameter(1, searchTerm + "%");				
			} else if(searchType.equalsIgnoreCase("ends")) {
				q.setParameter(1, "%" + searchTerm);					
			} else if (searchType.equalsIgnoreCase("contains")){
				q.setParameter(1, "%" + searchTerm + "%");									
			} else {
				q.setParameter(1, "%");
			}
		} else {
			q.setParameter(1, "%");
		}
		
		// Loop through results and add to list.
		List<String> albumIDs = q.getResultList();
		JSONArray albumListJSON = new JSONArray();
		for(String albumID : albumIDs){
			Album a = em.find(Album.class, albumID);
			albumListJSON.put(a.toJSON());
		}
		
		// Close connection to persistence manager.
		em.close();
		emFactory.close();
		
		return albumListJSON;
	}
	
	/**
	 * Method getAlbumListByArtistID returns a set of albums that are linked to the incoming artistID.
	 * @param artistID is the ID of the artist to be used in the search.
	 * @return is a JSON array containing a list of albums that are linked to the artistID. 
	 */
	public JSONArray getAlbumListByArtistID(String artistID){
		// Create persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		
		if(!artistID.equals("")) {
			ArtistManager am = new ArtistManager();
			Artist artist = am.getArtist(artistID);
			Set<Song> songs = artist.getArtistSongs();
			JSONArray albumListJSON = new JSONArray();
			if(songs != null) {
				// Since there is no table directly linking albums to artists, pass from artist to song to album.
				// Loop through each album associated with each song, adding the albums to the list.
				for (Song song : songs) {
					for (Album album : song.getSongAlbums()) {
						albumListJSON.put(album.toJSON());
					}
				}

			}
			
			// Close connection to persistence manager.			
			em.close();
			emFactory.close();
			
			return albumListJSON;
			
		} else {
			
			// Close connection to persistence manager.
			em.close();
			emFactory.close();
			
			return null;
		}
	}
	
	/**
	 * Method getAlbumListBySongID returns a set of albums that are linked to the incoming songID.
	 * @param songID is the ID of the song to be used in the search.
	 * @return is a JSON array containing a list of albums that are linked to the songID. 
	 */
	public JSONArray getAlbumListBySongID(String songID){
		// Create persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		
		if (songID != null) {
			Song s = em.find(Song.class, songID);
			Set<Album> albums = s.getSongAlbums();
			JSONArray albumListJSON = new JSONArray();
			for(Album album : albums){
				albumListJSON.put(album.toJSON());
			}
			
			// Close connection to persistence manager.
			em.close();
			emFactory.close();
			
			return albumListJSON;
		}
		
		// Close connection to persistence manager.
		em.close();
		emFactory.close();
		
		return null;
	}
	
}
