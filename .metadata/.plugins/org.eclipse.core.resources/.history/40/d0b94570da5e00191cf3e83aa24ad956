package bkg16_Music;

import java.util.List;
import java.util.Set;

import javax.persistence.*;

import org.json.JSONArray;

/**
 * Class GenreManager is responsible for creating, updating, retrieving and deleting Genre records.
 * @author bengundy
 *
 */
public class GenreManager {
	
	
	/**
	 * Method createGenre generates a new Genre record in the ORM object grid.
	 * @param genreName is the name of the genre.
	 * @param descr is a description of the genre.
	 */
	public void createGenre(String genreName, String descr){
		// Create and activate persistence manager connection.
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Genre g = new Genre();
		
		g.setGenreName(genreName);
		g.setDescription(descr);
		
		// Add Genre object to ORM object grid
		em.persist(g);
		
		// Commit transaction
		em.getTransaction().commit();
		
		// Close connection to persistence manager
		em.close();
		emFactory.close();
		
	}
	
	public Genre getGenre(String genreID){
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Genre g = em.find(Genre.class, genreID);
		
		
		
		em.close();
		emFactory.close();
		return g;
	}
	
	public JSONArray getGenreList(String searchTerm, String searchType){
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		
		// Note that you are querying the object grid, not the database!
		Query q = em.createQuery("SELECT g.genreID FROM Genre g WHERE g.genreName LIKE ?1");
		if(!searchTerm.equals("")){
			if(searchType.equalsIgnoreCase("equals")){
				q.setParameter(1, searchTerm);
			} else if(searchType.equalsIgnoreCase("begins")) {
				q.setParameter(1, searchTerm + "%");				
			} else if(searchType.equalsIgnoreCase("ends")) {
				q.setParameter(1, "%" + searchTerm);					
			} else if (searchType.equalsIgnoreCase("contains")){
				q.setParameter(1, "%" + searchTerm + "%");									
			} else {
				q.setParameter(1, "%");
			}
		} else {
			q.setParameter(1, "%");
		}
		
		
		List<String> genreIDs = q.getResultList();
		JSONArray genreListJSON = new JSONArray();
		for(String genreID : genreIDs){
			Genre g = em.find(Genre.class, genreID);
			genreListJSON.put(g.toJSON());
		}
		em.close();
		emFactory.close();
		
		return genreListJSON;
	}
	
	
	public void updateGenre(String genreID, String genreName, String descr){
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("MusicJPAGenre");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Genre g = em.find(Genre.class, genreID);
		
		if(!genreName.equals("")){
			g.setGenreName(genreName);
		}
		
		if(!descr.equals("")){
			g.setDescription(descr);
		}
		
		em.persist(g);
		em.getTransaction().commit();
		
		em.close();
		emFactory.close();
	}
	
	public void deleteGenre(int genreID){
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("MusicJPAGenre");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Genre g = em.find(Genre.class, genreID);
		
		em.remove(g);
		em.getTransaction().commit();
		
		em.close();
		emFactory.close();
	}
	
	public JSONArray getGenreListBySongID(String songID){
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("bkg16_Music");
		EntityManager em = emFactory.createEntityManager();
		
		if (songID != null) {
			Song s = em.find(Song.class, songID);
			Set<Genre> genres = s.getSongGenres();
			JSONArray genreListJSON = new JSONArray();
			for(Genre genre : genres){
				genreListJSON.put(genre.toJSON());
			}
			em.close();
			emFactory.close();
			
			return genreListJSON;
		}
		
		em.close();
		emFactory.close();
		
		return null;
	}
}
