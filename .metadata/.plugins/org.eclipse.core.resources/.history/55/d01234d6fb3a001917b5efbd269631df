package bkg16_Music;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.persistence.*;

/**
 * Class Song defines the Song object and includes methods for deleting the song and
 * adding to and removing from the song's artist list.
 * @author Ben Gundy
 */
@Entity
@Table (name="song")
public class Song {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	
	@Column(name = "song_id")
	private String songID; //SOMEHOW LINK THIS TO THE @ID ABOVE
	
	@Column(name = "title")
	private String title;
	
	@Column(name = "length")
	private int length;
	
	@Column(name = "file_path")
	private String filePath;
	
	@Column(name = "release_date")
	private String releaseDate;
	
	@Column(name = "record_date")
	private String recordDate;
	
	/*
	/**
	 * The main constructor takes a title, length, release date and record date and builds the song,
	 * as well as an empty list of artists.
	 * @param title is the song's title.
	 * @param length is the length of the song in minutes.
	 * @param releaseDate is the date the song was released.
	 * @param recordDate is the date the song was recorded.
	 */
	/*
	public Song(String title, int length, String releaseDate, String recordDate) {
		this.songID = UUID.randomUUID().toString();
		this.title = title;
		this.length = length;
		this.releaseDate = releaseDate;
		this.recordDate = recordDate;
		this.songArtists = new HashMap<String, Artist>();
		
		db = new DbUtilities();
		String sql = "INSERT INTO song (song_id, title, length, release_date, record_date) VALUES (?, ?, ?, ?, ?);";
		//System.out.println(sql);
		//db.executeQuery(sql);
		
		try {
			PreparedStatement stmt = db.getConn().prepareStatement(sql);
			stmt.setString(1, this.songID);
			stmt.setString(2, this.title);
			stmt.setInt(3, this.length);
			stmt.setString(4, this.releaseDate);
			stmt.setString(5, this.recordDate);
			stmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	*/
	
	/*
	/**
	 * This secondary constructor uses a songID to build an object by referencing a song in the database.
	 * @param songID is the song's identifying UUID.
	 */
	/*
	public Song(String songID) {
		this.songID = songID;
		this.songArtists = new HashMap<String, Artist>();
		
		db = new DbUtilities();
		String sql = "SELECT title, length, file_path, release_date, record_date FROM song WHERE song_id = ?;";
		//System.out.println(sql);
		try {
			PreparedStatement stmt = db.getConn().prepareStatement(sql);
			stmt.setString(1, this.songID);
			//ResultSet rs = db.getResultSet(sql);
			ResultSet rs = stmt.executeQuery();
			if(rs.next()) {
				this.title = rs.getString("title");
				this.length = rs.getInt("length");
				this.filePath = rs.getString("file_path");
				this.releaseDate = rs.getString("release_date");
				this.recordDate = rs.getString("record_date");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		//Populates list of artists by grabbing keys from song_artist table and adding artists to songArtists Map.
		String sql2 = "SELECT fk_artist_id FROM song_artist WHERE fk_song_id = ?;";
		//System.out.println(sql2);
		try {
			PreparedStatement stmt2 = db.getConn().prepareStatement(sql2);
			stmt2.setString(1, this.songID);
			//ResultSet rs2 = db.getResultSet(sql2);
			ResultSet rs2 = stmt2.executeQuery();
			//Using while instead of if, since the list will likely have more than one entry.
			while(rs2.next()) {
				this.songArtists.put(rs2.getString("fk_artist_id"), new Artist(rs2.getString("fk_artist_id")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	*/
	
	/**
	 * This method deletes a song from the database and destroys the Java object.
	 * @param songID is the song's identifying UUID.
	 */
	public void deleteSong(String songID) {
		this.songID = songID;
		
		
		//Setting fields to null or 0 to destroy object.
		this.title = null;
		this.length = 0;
		this.filePath = null;
		this.releaseDate = null;
		this.recordDate = null;
		this.songID = null;
	}
	
	
//Getters and Setters

	public void setSongID(String songID) {
		this.songID = songID;
	}
	
	public String getTitle() {
		return title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	public int getLength() {
		return length;
	}

	public void setLength(int length) {
		this.length = length;
	}

	public String getReleaseDate() {
		return releaseDate;
	}

	public void setReleaseDate(String releaseDate) {
		this.releaseDate = releaseDate;
	}

	public String getRecordDate() {
		return recordDate;
	}

	public void setRecordDate(String recordDate) {
		this.recordDate = recordDate;
	}
	
	public String getSongID() {
		return songID;
	}

	public String getFilePath() {
		return filePath;
	}
	
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	
}
